CLASS :
     The class is at the core of Java.it defines the shape	and	nature of an object.
     Any concept you	wish to	implement in a Java	program	must be	encapsulated within a class.
     Perhaps the most important	thing to understand	about a	class is that it defines a new data type.
     Thus, a class is a	template for an	object,	and	an	object	is	an instance	of a class.
     Because an	object is an instance of a class, you will often see the two words object and instance used	interchangeably.
     When you define a class, you declare its exact	form and nature.
     While very simple classes may contain only	code or	only data, most	real-world classes contain both.As you will	see, a class’ code defines the interface to	its data
     A class is	declared by	use	of the class keyword.The classes that have been used up to this	point are actually very	limited	examples of	its	complete form.
     Classes can (and usually do) get much more	complex.

Declaring Objects :
     First,	you	must declare a variable	of the class type.
     This variable does	not	define an object. Instead, it is simply	a variable that	can	refer to an	object.
     Second, you must acquire an actual, physical copy of the object and assign	it to that variable.
     You can do	this using the new operator.
     The new operator dynamically allocates	(that is, allocates	at run time)memory for an object and returns a reference to	it.
     This reference	is, essentially, the address in	memory of the object allocated	by	new.
     This reference	is then	stored in the variable.
     Thus, in Java,	all	class objects must be dynamically allocated.

     In	the	preceding sample programs, a line similar to the following is used to declare an object	of type	Box:
        Box	mybox	=	new	Box();

     This statement	combines the two steps just	described. It can be rewritten like this to	show each step more	clearly:
     Box	mybox;	//	declare	reference	to	object
     mybox	=	new	Box();	//	allocate	a	Box	object

     The first line	declares mybox as a	reference to an	object of type Box.
     At	this point,	mybox does not yet refer to an actual object.
     The next line allocates an object and assigns a reference to it to	mybox.
     After the second line executes, you can use mybox as if it	were a Box object.
     But in	reality, mybox simply holds, in	essence, the memory	address	of the actual Box object.

A Closer Look at new :
     The new operator dynamically allocates	memory for an object.
     The	classname	is the	name	of	the	class	that	is	being	instantiated.
     The	class	name	followed	by parentheses	specifies	the	constructor	for	the	class.
     A	constructor	defines	what occurs	when	an	object	of	a	class	is	created.
     Constructors	are	an	important	part of	all	classes	and	have	many	significant	attributes.
     However, if	no	explicit	constructor	is	specified,
                                 then	Java	will	automatically	supply	a default	constructor.
      	This	is	the	case	with	Box.	For	now,	we	will	use	the	default constructor.
      	                   Soon,	you	will	see	how	to	define	your own constructors.

 why you do	not	need to	use	new	for such things	as integers	or characters?

     	The	answer	is	that	Java’s	primitive	types are	not	implemented	as	objects.
     	Rather,	they	are	implemented	as	“normal” variables.
     	This	is	done	in	the	interest	of	efficiency.
     	As	you	will	see,	objects have	many	features	and	attributes	that	require
     	                    Java	to	treat	them	differently than	it	treats	the	primitive	types.

        It	is	important	to	understand	that	new	allocates	memory	for	an	object	during run	time.
        The	advantage	of	this	approach	is	that	your	program	can	create	as many	or
                           as	few	objects	as	it	needs	during	the	execution	of	your	program.
        However,	since	memory	is	finite,	it	is	possible	that	new	will	not	be	able
                                         to allocate	memory	for	an	object	because	insufficient	memory	exists.
        If	this happens,	a	run-time	exception	will	occur.

        Let’s	once	again	review	the	distinction	between	a	class	and	an	object.
        A class	creates	a	new	data	type	that	can	be	used	to	create	objects.
        That	is,	a	class creates	a	logical	framework	that	defines	the	relationship	between	its	members.
        When	you	declare	an	object	of	a	class,	you	are	creating	an	instance	of	that class.
        Thus,	a	class	is	a	logical	construct.	An	object	has	physical	reality.
        (That is,	an	object	occupies	space	in	memory.) It	is	important	to	keep this distinction clearly in mind.

 Assigning	Object	Reference	Variables :

         Although	b1	and	b2	both	refer	to	the	same	object,	they	are	not	linked	in	any other	way.
         For	example,	a	subsequent	assignment	to	b1	will	simply	unhook	b1 from	the	original	object
                                  without	affecting	the	object	or	affecting	b2.
         For example:
         Box	b1	=	new	Box();
         Box	b2	=	b1;
         //	...
         b1	=	null;
         Here,	b1	has	been	set	to	null,	but	b2	still	points	to	the	original	object.

   Introducing	Methods :
         	classes	usually	consist	of	two things:	instance	variables	and	methods.
         	The	topic	of	methods	is	a	large	one because	Java	gives	them	so	much	power	and	flexibility.
         	Here,	type	specifies	the	type	of	data	returned	by	the	method.
         	This	can	be	any valid	type,	including	class	types	that	you	create.
         	If	the	method	does	not	return	a value,	its	return	type	must	be	void.
         	The	name of	the	method is specified	by name.If the method has no parameters, then the parameter	list will be empty.
         	The	parameter-list	is	a	sequence	of	type	and identifier	pairs	separated	by	commas.
         	Parameters	are	essentially	variables that receive the value of the arguments passed to the method when it is called.


Returning	a	Value :
            While	the	implementation	of	volume(	)	does	move	the	computation	of	a	box’s volume	inside
                                  the	Box	class	where	it	belongs,	it	is	not	the	best	way	to	do	it.

  	what	if	another	part	of	your	program	wanted	to	know	the	volume	of	a box,	but	not	display	its	value?
  	       	A	better	way	to	implement	volume(	)	is	to	have it	compute	the	volume	of	the	box	and	return	the
  	       	  result	to	the	caller.	The following	example,	an	improved	version	of	the	preceding	program,

                Double volume()
                return W*H*D

Adding	a	Method	That	Takes	Parameters :
            While	some	methods	don’t	need	parameters,	most	do.	Parameters	allow	a method	to	be	generalized.
            That	is,	a	parameterized	method	can	operate	on	a variety	of	data	and/or	be	used
                                                     in	a	number	of	slightly	different	situations.
             It	is	important	to	keep	the	two	terms	parameter	and	argument	straight.
             A parameter	is	a	variable	defined	by	a	method	that	receives	a	value	when	the method	is	called.
             Here we declare in class one more method and we print main method by using parameterised method.

             eg:
               box b1=new box(12,34,23);
Constructors:
             It	can	be	tedious	to	initialize	all	of	the	variables	in	a	class	each	time	an instance	is	created.
             Even	when	you	add	convenience	methods	like	setDim(	),	it would	be	simpler	and	more	concise	to	have
                                            all	of	the	setup	done	at	the	time	the object	is	first	created.
             A	constructor	initializes	an	object	immediately	upon	creation.
             It	has	the same	name	as	the	class	in	which	it	resides	and	is	syntactically	similar	to	a method.
             Once	defined,the	constructor	is	automatically	called	when the object is created,before the new operator completes.
             Constructors	look	a	little	strange because	they	have	no	return	type,	not	even	void.
             This	is	because	the	implicit return	type	of	a	class’	constructor	is	the	class	type	itself.
             It	is	the	constructor’s job	to	initialize	the	internal	state	of	an	object	so	that	the	code
             	     creating	an instance	will	have	a	fully	initialized,	usable	object	immediately.
             Box	example	so	that	the	dimensions	of	a box are automatically	initialized	when an	object	is	constructed.
              To	do	so,	replace setDim(	)	with	a	constructor.
              Let’s	begin	by	defining	a	simple	constructor	that sets	the	dimensions	of	each	box	to	the	same	values.

              new	Box(	)	is	calling	the	Box(	)	constructor.
              When	you	do	not	explicitly	define a constructor for a	class,then Java creates a default constructor for the class.
              This	is	why	the	preceding line of code worked in earlier versions of Box that did not define a constructor.
              When	using	the	default	constructor, all non initialized	instance variables	will have their	default	values,
              which	are	zero, null,	and	false,	for	numeric	types,	reference	types,	and	boolean,	respectively.
              The default constructor is often	sufficient for simple classes, but it usually won’t	do for more	sophisticated ones.
              Once	you	define	your	own	constructor, the	default	constructor	is	no	longer	used.

  Parameterized	Constructors:
           While the Box(	) constructor in the preceding example does	initialize a Box object,it is not very useful—all boxes	have the same	dimensions.
           What	is needed	is	a	way	to	construct	Box	objects	of	various	dimensions.
           The	easy solution	is	to	add	parameters	to	the	constructor.
           As	you	can	probably	guess,	this makes	it	much	more	useful.
           	Pay	special	attention	to	how	Box	objects	are	created
The	this	Keyword:
           Sometimes	a	method	will	need	to	refer	to	the	object	that	invoked	it.
           To	allow this,	Java	defines	the	this	keyword.
           this	can	be	used	inside	any	method	to	refer to	the	current	object.
           That	is,	this	is	always	a	reference	to	the	object	on	which the	method	was	invoked.
           You	can	use	this	anywhere	a	reference	to	an	object	of the	current	class’	type	is	permitted.
           A redundant use of this
           Box(int w,int h,int d){
               this. width = w;
               this.height = h;
               this.depth = d;
           }
           This	version	of	Box(	)	operates	exactly	like	the	earlier	version.
           The	use	of	this is	redundant,	but	perfectly	correct.
           Inside	Box(	),	this	will	always	refer	to	the invoking	object.








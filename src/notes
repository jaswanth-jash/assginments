CLASS :
     The class is at the core of Java.it defines the shape	and	nature of an object.
     Any concept you	wish to	implement in a Java	program	must be	encapsulated within a class.
     Perhaps the most important	thing to understand	about a	class is that it defines a new data type.
     Thus, a class is a	template for an	object,	and	an	object	is	an instance	of a class.
     Because an	object is an instance of a class, you will often see the two words object and instance used	interchangeably.
     When you define a class, you declare its exact	form and nature.
     While very simple classes may contain only	code or	only data, most	real-world classes contain both.As you will	see, a class’ code defines the interface to	its data
     A class is	declared by	use	of the class keyword.The classes that have been used up to this	point are actually very	limited	examples of	its	complete form.
     Classes can (and usually do) get much more	complex.

Declaring Objects :
     First,	you	must declare a variable	of the class type.
     This variable does	not	define an object. Instead, it is simply	a variable that	can	refer to an	object.
     Second, you must acquire an actual, physical copy of the object and assign	it to that variable.
     You can do	this using the new operator.
     The new operator dynamically allocates	(that is, allocates	at run time)memory for an object and returns a reference to	it.
     This reference	is, essentially, the address in	memory of the object allocated	by	new.
     This reference	is then	stored in the variable.
     Thus, in Java,	all	class objects must be dynamically allocated.

     In	the	preceding sample programs, a line similar to the following is used to declare an object	of type	Box:
        Box	mybox	=	new	Box();

     This statement	combines the two steps just	described. It can be rewritten like this to	show each step more	clearly:
     Box	mybox;	//	declare	reference	to	object
     mybox	=	new	Box();	//	allocate	a	Box	object

     The first line	declares mybox as a	reference to an	object of type Box.
     At	this point,	mybox does not yet refer to an actual object.
     The next line allocates an object and assigns a reference to it to	mybox.
     After the second line executes, you can use mybox as if it	were a Box object.
     But in	reality, mybox simply holds, in	essence, the memory	address	of the actual Box object.

A Closer Look at new :
     The new operator dynamically allocates	memory for an object.
     The	classname	is the	name	of	the	class	that	is	being	instantiated.
     The	class	name	followed	by parentheses	specifies	the	constructor	for	the	class.
     A	constructor	defines	what occurs	when	an	object	of	a	class	is	created.
     Constructors	are	an	important	part of	all	classes	and	have	many	significant	attributes.
     However, if	no	explicit	constructor	is	specified,
                                 then	Java	will	automatically	supply	a default	constructor.
      	This	is	the	case	with	Box.	For	now,	we	will	use	the	default constructor.
      	                   Soon,	you	will	see	how	to	define	your own constructors.

 why you do	not	need to	use	new	for such things	as integers	or characters?

     	The	answer	is	that	Java’s	primitive	types are	not	implemented	as	objects.
     	Rather,	they	are	implemented	as	“normal” variables.
     	This	is	done	in	the	interest	of	efficiency.
     	As	you	will	see,	objects have	many	features	and	attributes	that	require
     	                    Java	to	treat	them	differently than	it	treats	the	primitive	types.

        It	is	important	to	understand	that	new	allocates	memory	for	an	object	during run	time.
        The	advantage	of	this	approach	is	that	your	program	can	create	as many	or
                           as	few	objects	as	it	needs	during	the	execution	of	your	program.
        However,	since	memory	is	finite,	it	is	possible	that	new	will	not	be	able
                                         to allocate	memory	for	an	object	because	insufficient	memory	exists.
        If	this happens,	a	run-time	exception	will	occur.

        Let’s	once	again	review	the	distinction	between	a	class	and	an	object.
        A class	creates	a	new	data	type	that	can	be	used	to	create	objects.
        That	is,	a	class creates	a	logical	framework	that	defines	the	relationship	between	its	members.
        When	you	declare	an	object	of	a	class,	you	are	creating	an	instance	of	that class.
        Thus,	a	class	is	a	logical	construct.	An	object	has	physical	reality.
        (That is,	an	object	occupies	space	in	memory.) It	is	important	to	keep this distinction clearly in mind.

 Assigning	Object	Reference	Variables :

         Although	b1	and	b2	both	refer	to	the	same	object,	they	are	not	linked	in	any other	way.
         For	example,	a	subsequent	assignment	to	b1	will	simply	unhook	b1 from	the	original	object
                                  without	affecting	the	object	or	affecting	b2.
         For example:
         Box	b1	=	new	Box();
         Box	b2	=	b1;
         //	...
         b1	=	null;
         Here,	b1	has	been	set	to	null,	but	b2	still	points	to	the	original	object.





